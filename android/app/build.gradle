plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
    id "com.google.gms.google-services"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}


def flutterMinSdkVersion = localProperties.getProperty('flutter.minSdkVersion')
if (flutterMinSdkVersion == null) {
    flutterMinSdkVersion =  flutter.minSdkVersion// is 16
}

def flutterTargetSdkVersion = localProperties.getProperty('flutter.targetSdkVersion')
if (flutterTargetSdkVersion == null) {
    flutterTargetSdkVersion = flutter.targetSdkVersion// is 31
}

def flutterCompileSdkVersion = localProperties.getProperty('flutter.compileSdkVersion')
if (flutterCompileSdkVersion == null) {
    flutterCompileSdkVersion = flutter.compileSdkVersion// is 31
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace "com.tcubedstudios.pika_patrol"
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.tcubedstudios.pika_patrol"

        //minSdkVersion flutter.minSdkVersion <- is 16, need higher
        minSdkVersion flutterMinSdkVersion.toInteger()

        //targetSdkVersion flutter.targetSdkVersion <- is 31, need higher
        targetSdkVersion flutterTargetSdkVersion.toInteger()

        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName

        multiDexEnabled true
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        def date = new Date();
        def formattedDate = date.format('yyyyMMddHHmmss')

        release {
            shrinkResources false
            minifyEnabled false
            signingConfig signingConfigs.release
            archivesBaseName = "Pika Patrol - v$flutterVersionCode ($flutterVersionName) $formattedDate"
        }
    }
}

flutter {
    source '../..'
}


dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:multidex:1.0.3'
}

tasks.register('copyNewApksToReleases') {
    doLast {
        def fromDirPath = "${ localProperties.getProperty('flutter.androidReleasePath') }\\"
        def toDirPath = "${ localProperties.getProperty('flutter.releasesPath') }\\"

        println "FromDirPath:$fromDirPath"
        println "ToDirPath:$toDirPath"

        def flutterReleasesDirFiles = fileTree(include:['*.apk'], dir:"$fromDirPath").collect()
        flutterReleasesDirFiles.eachWithIndex { item, index ->

            def fileName = item.name
            def fromFilePath = "$fromDirPath$fileName"

            def toFilePath = "$toDirPath$fileName"
            def targetFile = new File(toFilePath)

            def copied = "Did not copy"
            def alreadyExists = ", already exists"
            if (!targetFile.exists()) {
                copied = "Copied"
                alreadyExists = ""
                copy {
                    from new File(fromFilePath)
                    into new File(toDirPath)
                }
            }

            println "$copied $fromFilePath to $toFilePath $alreadyExists"
        }
    }
}
//tasks.named("build"){
//    finalizedBy("copyNewApksToReleases")
//}
