def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 30

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "com.tcubedstudios.pika_patrol"
        minSdkVersion 21
        targetSdkVersion 30
        compileSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        def date = new Date();
        def formattedDate = date.format('yyyyMMddHHmmss')
//        def releasesDir = "$flutterRoot/releases"
        release {
            shrinkResources false
            minifyEnabled false
            signingConfig signingConfigs.release
            archivesBaseName = "Pika Patrol - v$flutterVersionCode ($flutterVersionName) $formattedDate"
        }
    }
}
/*applicationVariants.all { variant ->
    variant.outputs.all {
        outputFileName = "${applicationName}_${flutterVersionName}_${flutterVersionCode}.apk"
    }
}
applicationVariants.all { variant ->
    variant.outputs.each { output ->
        def date = new Date();
        def formattedDate = date.format('yyyyMMddHHmmss')
        output.outputFile = new File(output.outputFile.parent,
                output.outputFile.name.replace("app-release", "Pika Patrol " + flutterVersionName+ "_" + flutterVersionCode + "_"+ formattedDate)
                //for Debug use output.outputFile = new File(output.outputFile.parent,
                //                             output.outputFile.name.replace("-debug", "-" + formattedDate)
        )
    }
}*/
flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:multidex:1.0.3'
}

apply plugin: 'com.google.gms.google-services'  // Google Services plugin

def projectRoot = rootProject.projectDir
def fromPath = localProperties.getProperty('flutter.androidReleasePath')
def toPath = localProperties.getProperty('flutter.releasesPath')
tasks.register('BackupApks') {
//    if (project.hasProperty("TEST_BACKUP")) {
        println "Backing up apks..."

        println "Project Root:$projectRoot"
        println "From path:$fromPath"
        println "To path:$toPath"

        fileTree("$fromPath").matching{
            include "*.apk"
        }.each {
            println("Item:$it")
        }

        def names = []
        rootProject.fileTree(fromPath).visit { FileVisitDetails details ->
            names << details.file.path
            println("Fuck")
        }
        names.forEach {
            println("Name: $it")
        }

        println("Done with file tree fuik")

        copy {
            from fromPath
            into toPath
        }

//    } else {
//        println "No backup done because TEST_BACKUP gradle variable is not defined."
//    }
}

println "\n\nfiles"
def ft0 = files("libs/a.jar").collect()
println "ft0:$ft0"

println "\n\nfileTree"
def ft1 = fileTree(include:['*.jar'], dir:"libs").collect()
println "ft1 $ft1"

println "\n\nfileTree with nested dirs"
def ft2 = fileTree(include:['**/*.apk'], dir:"I:\\Google Drive (spragucm)\\Projects\\Pika Patrol\\PikaPatrol2\\build\\app\\outputs\\apk\\release").collect()
println ft2

ft0.each { item ->
    println("File tree item:$item")
}

tasks.register('copyApkToReleases') {
//    from layout.buildDirectory.file("reports/my-report.pdf")
//    into layout.buildDirectory.dir("toArchive")
//    def fromFile = new File("I:\\Google Drive (spragucm)\\Projects\\Pika Patrol\\PikaPatrol2\\build\\app\\outputs\\apk\\release\\Pika Patrol - v130 (1.3.0) 20220723120348-release.apk")
//    def intoDir = new File("I:\\Google Drive (spragucm)\\Projects\\Pika Patrol\\PikaPatrol2\\releases\\")
    doLast {
        copy {
//            from new File("I:\\Google Drive (spragucm)\\Projects\\Pika Patrol\\PikaPatrol2\\android\\app\\google-services.json")
//            into new File("I:\\Google Drive (spragucm)\\Projects\\Pika Patrol\\PikaPatrol2\\android\\google-services.json")

            from new File("I:\\Google Drive (spragucm)\\Projects\\Pika Patrol\\PikaPatrol2\\build\\app\\outputs\\apk\\release\\Pika Patrol - v130 (1.3.0) 20220723120348-release.apk")
            into new File("I:\\Google Drive (spragucm)\\Projects\\Pika Patrol\\PikaPatrol2\\releases\\")
        }

//        ft0.eachWithIndex { item, index ->
//            println "Eat ass $index $item"
//            println "From:$fromFile"
//            println "Into:$intoDir"
//            //from "I:\\Google Drive (spragucm)\\Projects\\Pika Patrol\\PikaPatrol2\\build\\app\\outputs\\apk\\release\\Pika Patrol - v130 (1.3.0) 20220723120348-release.apk"
//            from item
//            into intoDir
//            println "fuck off $index"
//        }
    }

}