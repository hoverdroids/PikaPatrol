def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "com.tcubedstudios.pika_patrol"
        minSdkVersion 21
        targetSdkVersion 30
        compileSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        def date = new Date();
        def formattedDate = date.format('yyyyMMddHHmmss')

        release {
            shrinkResources false
            minifyEnabled false
            signingConfig signingConfigs.release
            archivesBaseName = "Pika Patrol - v$flutterVersionCode ($flutterVersionName) $formattedDate"
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:multidex:1.0.3'
}

apply plugin: 'com.google.gms.google-services'  // Google Services plugin

tasks.register('copyNewApksToReleases') {
    doLast {
        def fromDirPath = "${ localProperties.getProperty('flutter.androidReleasePath') }\\"
        def toDirPath = "${ localProperties.getProperty('flutter.releasesPath') }\\"

        println "FromDirPath:$fromDirPath"
        println "ToDirPath:$toDirPath"

        def flutterReleasesDirFiles = fileTree(include:['*.apk'], dir:"$fromDirPath").collect()
        flutterReleasesDirFiles.eachWithIndex { item, index ->

            def fileName = item.name
            def fromFilePath = "$fromDirPath$fileName"

            def toFilePath = "$toDirPath$fileName"
            def targetFile = new File(toFilePath)

            def copied = "Did not copy"
            def alreadyExists = ", already exists"
            if (!targetFile.exists()) {
                copied = "Copied"
                alreadyExists = ""
                copy {
                    from new File(fromFilePath)
                    into new File(toDirPath)
                }
            }

            println "$copied $fromFilePath to $toFilePath $alreadyExists"
        }
    }
}
//tasks.named("build"){
//    finalizedBy("copyNewApksToReleases")
//}