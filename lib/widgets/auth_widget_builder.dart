// Used to create user-dependant objects that need to be accessible by all widgets.
// This widget should live above the [MaterialApp].
// See [AuthWidget], a descendant widget that consumes the snapshot generated by this builder
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../model/app_user.dart';
import '../model/app_user_profile.dart';
import '../services/firebase_auth_service.dart';
import '../services/firebase_database_service.dart';

class AuthWidgetBuilder extends StatelessWidget {

  const AuthWidgetBuilder({Key? key, required this.builder}): super(key: key);

  final Widget Function(BuildContext, AsyncSnapshot<AppUser?>) builder;

  @override
  Widget build(BuildContext context) {

    final firebaseAuthService = Provider.of<FirebaseAuthService>(context);//, listen: false TODO - CHRIS - in order to avoid rebuilding the entire view tree

    return StreamBuilder<AppUser?>(
      stream: firebaseAuthService.user,
      initialData: null,
      builder: (context, appUserSnapshot) {

        final AppUser? appUser = appUserSnapshot.data;

        return MultiProvider(
          // Globally useful providers that depend on context, app user, or other global providers (from main.dart)
          providers: [
            Provider<AppUser?>.value(value: appUser),
            Provider<FirebaseDatabaseService>(
              create: (_) => FirebaseDatabaseService(uid: appUser?.uid)//Only one service to avoid multiple connections to firebase
            )
          ],
          child: StreamProvider<AppUserProfile?>.value(
              value: Provider.of<FirebaseDatabaseService>(context).userProfile,
              initialData: null,
              child: builder(context, appUserSnapshot)
          )

          // builder: (context, child) {
          //   return ;
          //
          //   //FirebaseDatabaseService(uid: user?.uid).userProfile,
          //
          //
          //
          //   return builder(context, appUserSnapshot);
          // }

            //child: builder(context, appUserSnapshot)
        );
      }
    );
  }
}

//Using StreamProvider here instead of including in providers array because the value depends on context,
//which I'm not seeing how to obtain there outside of create (which isn't the right place either)


// builder: (context, child) {return StreamProvider<AppUser?>.value(
// value: Provider.of<FirebaseAuthService>(context).user,//subscribe to AuthService and create stream of AppUser? data the emits when user changes
// initialData: null,
// child: const MyApp()
// );